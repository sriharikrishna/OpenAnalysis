// /!\ ATTENTION:
//
//     THIS IS AN AUTOMATICALLY GENERATED FILE
//     CREATED BY THE genOutputMethod UTILITY.
//     DO NOT EDIT THIS FILE DIRECTLY AS IT WILL
//     BE OVERWRITTEN.

#include "EquivSets.hpp"

namespace OA {
  namespace Alias {

void EquivSets::output(OA::IRHandlesIRInterface& ir)
{
    sOutBuild->objStart("EquivSets");

    sOutBuild->mapStart("mMemRefToProc", "MemRefHandle", "ProcHandle");
    std::map<MemRefHandle,ProcHandle>::iterator reg_mMemRefToProc_iterator;
    for(reg_mMemRefToProc_iterator = mMemRefToProc.begin();
        reg_mMemRefToProc_iterator != mMemRefToProc.end();
        reg_mMemRefToProc_iterator++)
    {
        const MemRefHandle &first = reg_mMemRefToProc_iterator->first;
        const ProcHandle  &second = reg_mMemRefToProc_iterator->second;
        sOutBuild->mapKeyStart();
        sOutBuild->outputIRHandle(first, ir);
        sOutBuild->mapKeyEnd();
        sOutBuild->mapValueStart();
        sOutBuild->outputIRHandle(second, ir);
        sOutBuild->mapValueEnd();
    }
    sOutBuild->mapEnd("mMemRefToProc");

    sOutBuild->mapStart("mMemRefToSets", "MemRefHandle", "int");
    std::map<MemRefHandle, std::set<int> >::iterator reg_mMemRefToSets_iterator;
    for(reg_mMemRefToSets_iterator = mMemRefToSets.begin();
        reg_mMemRefToSets_iterator != mMemRefToSets.end();
        reg_mMemRefToSets_iterator++)
    {
        const MemRefHandle &first = reg_mMemRefToSets_iterator->first;
        std::set<int>  &second = reg_mMemRefToSets_iterator->second;
        sOutBuild->mapKeyStart();
        sOutBuild->outputIRHandle(first, ir);
        sOutBuild->mapKeyEnd();
        sOutBuild->mapValueStart();
        sOutBuild->listStart();
        std::set<int>::iterator reg_second_iterator;
        for(reg_second_iterator  = second.begin();
            reg_second_iterator != second.end();
            reg_second_iterator++)
        {
            int item = *reg_second_iterator;
            sOutBuild->listItem(OA::int2string(item));
        }
        sOutBuild->listEnd();
        sOutBuild->mapValueEnd();
    }
    sOutBuild->mapEnd("mMemRefToSets");


    sOutBuild->mapStart("mProcNSetToLocs", "ProcHandle", "std::map<int,OA_ptr<Location> >");
    std::map<ProcHandle,std::map<int,std::set<OA_ptr<Location> > > >::iterator
      procMapIter;
    for (procMapIter=mProcNSetToLocs.begin(); 
         procMapIter!=mProcNSetToLocs.end(); 
         procMapIter++ )
    {
      const ProcHandle &first = procMapIter->first;
      std::map<int,std::set<OA::OA_ptr<Location> > >  &second = procMapIter->second;

      sOutBuild->mapKeyStart();
      sOutBuild->outputIRHandle(first, ir);
      sOutBuild->mapKeyEnd();
      sOutBuild->mapValueStart();

      sOutBuild->mapStart("SetToLocs", "int", "OA_ptr<Location>");
      std::map<int, std::set<OA::OA_ptr<Location> > >::iterator equivSetIter;
      for (equivSetIter=second.begin();  equivSetIter!=second.end();
           equivSetIter++) 
      {
        const int &first2 = equivSetIter->first;
        std::set<OA::OA_ptr<Location> >   &second2 = equivSetIter->second;

        sOutBuild->mapKey(OA::int2string(first2));
        sOutBuild->mapValueStart();
        sOutBuild->listStart();
        std::set<OA::OA_ptr<Location> >::iterator reg_second_iterator;
        for(reg_second_iterator  = second2.begin();
            reg_second_iterator != second2.end();
            reg_second_iterator++)
        {
            OA::OA_ptr<Location>  item = *reg_second_iterator;
            sOutBuild->listItemStart();
            item->output(ir);
            sOutBuild->listItemEnd();
        }
        sOutBuild->listEnd();
        sOutBuild->mapValueEnd();
      }
      sOutBuild->mapEnd("SetToLocs");

    }
    sOutBuild->mapEnd("ProcNSetToLocs");
    sOutBuild->mapValueEnd();

    sOutBuild->objEnd("EquivSets");
}

  } // end of Alias namespace
} // end of OA namespace
