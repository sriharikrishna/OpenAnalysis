
/* AvailableExpressionsStandard.cpp
   NOTE: This file was automatically generated by DFAGen.  It is the
         implementation of the class for AvailableExpressions analysis results.
*/


#include "auto_AvailableExpressionsStandard.hpp"

namespace OA {
  namespace AvailableExpressions {


AvailableExpressionsDFSet::iterator AvailableExpressionsStandard::getAvailableExpressionsIterator(StmtHandle s) {
    AvailableExpressionsDFSet::iterator retval;

    if(mAvailableExpressions[s].ptrEqual(0)) {
        mAvailableExpressions[s] = new AvailableExpressionsDFSet();
    }

    retval = mAvailableExpressions[s]->begin();

    return retval;
}


AvailableExpressionsDFSet::iterator AvailableExpressionsStandard::getExitAvailableExpressionsIterator() {
    AvailableExpressionsDFSet::iterator retval;

    retval = mExitAvailableExpressions->begin();
    return retval;
}


void AvailableExpressionsStandard::output(IRHandlesIRInterface& ir) {
#if 0
    sOutBuild->objStart("AvailableExpressionsStandard");

    sOutBuild->mapStart("mAvailableExpressions", "StmtHandle", "OA_ptr<LocSet>");
    std::map<StmtHandle,OA_ptr<LocSet> >::iterator mapIter;
    for (mapIter = mAvailableExpressions.begin(); mapIter != mAvailableExpressions.end(); mapIter++) {
        StmtHandle s = mapIter->first;
        OA_ptr<LocSet> rdset = mapIter->second;
        if ( rdset.ptrEqual(0) ) continue;

        sOutBuild->mapEntryStart();
        sOutBuild->mapKeyStart();
        sOutBuild->outputIRHandle(s, ir);
        sOutBuild->mapKeyEnd();
        sOutBuild->mapValueStart();


        sOutBuild->listStart();
        OA_ptr<".TYPEITER."> setIter;
        setIter = getAvailableExpressionsIterator(s);
        for ( ; setIter->isValid(); (*setIter)++ ) {
             sOutBuild->listItemStart(); {
             setIter->current()->output(ir);
            } sOutBuild->listItemEnd();
        }
        sOutBuild->listEnd();
        sOutBuild->mapValueEnd();
        sOutBuild->mapEntryEnd();
    }
    sOutBuild->mapEnd("mAvailableExpressions");
    sOutBuild->objEnd("AvailableExpressionsStandard");
#endif
}


void AvailableExpressionsStandard::dump(std::ostream& os, OA_ptr<IRHandlesIRInterface> ir)
{
    std::cout << "======AvailableExpressions===="<< std::endl;
    AvailableExpressionsDFSet::iterator iter;

    std::map<StmtHandle, OA_ptr<AvailableExpressionsDFSet> >::iterator mapIter;

    for (mapIter = mAvailableExpressions.begin(); mapIter != mAvailableExpressions.end(); mapIter++) {
        std::cout<< "\tstmt = " << ir->toString(mapIter->first) << std::endl;
        iter = getAvailableExpressionsIterator(mapIter->first);

        for ( ; iter != mAvailableExpressions[mapIter->first]->end(); iter++ ) {
            std::cout << "\t\t";
        cout << (*iter)->toString(mIR);
            std::cout << std::endl;
        }
    }
}


  } // end of AvailableExpressions namespace
} // end of OA namespace
