
/* AvailableExpressionsStandard.hpp
   NOTE: This file was automatically generated by DFAGen.  It is the interface
         for the AvailableExpressions analysis results.
*/

#ifndef AvailableExpressionsStandard_hpp
#define AvailableExpressionsStandard_hpp

#include <cassert>
#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <OpenAnalysis/Utils/OA_ptr.hpp>
#include <OpenAnalysis/IRInterface/IRHandles.hpp>
#include <OpenAnalysis/IRInterface/auto_AvailableExpressionsIRInterface.hpp>
#include <OpenAnalysis/OABase/Annotation.hpp>
#include <OpenAnalysis/Utils/GenOutputTool.hpp>
#include <OpenAnalysis/Location/Location.hpp>
#include <OpenAnalysis/DataFlow/DFAGenDFSet.hpp>
#include <OpenAnalysis/Utils/Util.hpp>

namespace OA {
  namespace AvailableExpressions {

typedef DataFlow::DFAGenDFSet<OA_ptr<NewExprTree> > AvailableExpressionsDFSet;

class AvailableExpressionsStandard : public virtual Annotation {
  public:
    AvailableExpressionsStandard(ProcHandle p, OA_ptr<AvailableExpressionsIRInterface> _ir) {
        mIR = _ir;
        mExitAvailableExpressions = new AvailableExpressionsDFSet();
    }
    ~AvailableExpressionsStandard() {}

    AvailableExpressionsDFSet::iterator getAvailableExpressionsIterator(StmtHandle s);

    AvailableExpressionsDFSet::iterator getExitAvailableExpressionsIterator();

    void insert(StmtHandle s, OA_ptr<NewExprTree>  val) {
        if(mAvailableExpressions[s].ptrEqual(0)) {
            mAvailableExpressions[s] = new AvailableExpressionsDFSet();
        }
        mAvailableExpressions[s]->insert(val);
    }

    void insertExit(OA_ptr<NewExprTree>  val) {
        mExitAvailableExpressions->insert(val);
    }

    OA_ptr<AvailableExpressionsDFSet> getAvailableExpressionsSet(StmtHandle s) {
        map<StmtHandle, OA_ptr<AvailableExpressionsDFSet> >::iterator element =
            mAvailableExpressions.find(s);

        if(element == mAvailableExpressions.end()) {
            mAvailableExpressions[s] = new AvailableExpressionsDFSet();
            element = mAvailableExpressions.find(s);
        }

        return (*element).second;
    }

    void output(IRHandlesIRInterface& pIR);

    void dump(std::ostream& os, OA_ptr<IRHandlesIRInterface> ir);

  private:
    map<StmtHandle, OA_ptr<AvailableExpressionsDFSet> > mAvailableExpressions;
    OA_ptr<AvailableExpressionsDFSet>  mExitAvailableExpressions;
    OA_ptr<AvailableExpressionsIRInterface> mIR;
};

  } // end of Liveness namespace
} // end of OA namespace

#endif

