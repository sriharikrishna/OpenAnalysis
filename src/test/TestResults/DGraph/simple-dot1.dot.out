DGraphImplement::addEdge(e)
	e = Edge: getId() = 1, sourceId = 1, sinkId = 2
	adding e->source, which is ...
Node: getId() = 1, mChar = a
	adding e->sink, which is ...
Node: getId() = 2, mChar = c
DGraphImplement::addEdge(e)
	e = Edge: getId() = 2, sourceId = 3, sinkId = 4
	adding e->source, which is ...
Node: getId() = 3, mChar = e
	adding e->sink, which is ...
Node: getId() = 4, mChar = d
DGraphImplement::addEdge(e)
	e = Edge: getId() = 3, sourceId = 2, sinkId = 3
DGraphImplement::addEdge(e)
	e = Edge: getId() = 4, sourceId = 2, sinkId = 4
DGraphImplement::addEdge(e)
	e = Edge: getId() = 5, sourceId = 3, sinkId = 2
DGraphImplement::addEdge(e)
	e = Edge: getId() = 6, sourceId = 4, sinkId = 5
	adding e->sink, which is ...
Node: getId() = 5, mChar = f
DGraphImplement::addEdge(e)
	e = Edge: getId() = 7, sourceId = 5, sinkId = 3

digraph DGraphImplement {
    node [shape=rectangle];
    1 [ label="1: a" ];
    2 [ label="2: c" ];
    4 [ label="4: d" ];
    3 [ label="3: e" ];
    5 [ label="5: f" ];
    1 -> 2 [ label="1" ];
    3 -> 4 [ label="2" ];
    2 -> 3 [ label="3" ];
    2 -> 4 [ label="4" ];
    3 -> 2 [ label="5" ];
    4 -> 5 [ label="6" ];
    5 -> 3 [ label="7" ];}

NodesIterator: 
Node: getId() = 1, mChar = a
Node: getId() = 2, mChar = c
Node: getId() = 4, mChar = d
Node: getId() = 3, mChar = e
Node: getId() = 5, mChar = f

getOutgoingEdgesIterator: 
Starting Node:
Node: getId() = 1, mChar = a
	Outgoing edges:
Edge: getId() = 1, sourceId = 1, sinkId = 2

Starting Node:
Node: getId() = 2, mChar = c
	Outgoing edges:
Edge: getId() = 3, sourceId = 2, sinkId = 3
Edge: getId() = 4, sourceId = 2, sinkId = 4

Starting Node:
Node: getId() = 4, mChar = d
	Outgoing edges:
Edge: getId() = 6, sourceId = 4, sinkId = 5

Starting Node:
Node: getId() = 3, mChar = e
	Outgoing edges:
Edge: getId() = 2, sourceId = 3, sinkId = 4
Edge: getId() = 5, sourceId = 3, sinkId = 2

Starting Node:
Node: getId() = 5, mChar = f
	Outgoing edges:
Edge: getId() = 7, sourceId = 5, sinkId = 3


getSinkNodesIterator: 
Starting Node:
Node: getId() = 1, mChar = a
	Sinks:
Node: getId() = 2, mChar = c

Starting Node:
Node: getId() = 2, mChar = c
	Sinks:
Node: getId() = 3, mChar = e
Node: getId() = 4, mChar = d

Starting Node:
Node: getId() = 4, mChar = d
	Sinks:
Node: getId() = 5, mChar = f

Starting Node:
Node: getId() = 3, mChar = e
	Sinks:
Node: getId() = 4, mChar = d
Node: getId() = 2, mChar = c

Starting Node:
Node: getId() = 5, mChar = f
	Sinks:
Node: getId() = 3, mChar = e


ReversePostDFSIterator: 
DGraphImplement::reverse_postorder_recurse
	pNode = Node: getId() = 1, mChar = a
	n = Node: getId() = 2, mChar = c
DGraphImplement::reverse_postorder_recurse
	pNode = Node: getId() = 2, mChar = c
	n = Node: getId() = 3, mChar = e
DGraphImplement::reverse_postorder_recurse
	pNode = Node: getId() = 3, mChar = e
	n = Node: getId() = 4, mChar = d
DGraphImplement::reverse_postorder_recurse
	pNode = Node: getId() = 4, mChar = d
	n = Node: getId() = 5, mChar = f
DGraphImplement::reverse_postorder_recurse
	pNode = Node: getId() = 5, mChar = f
	n = Node: getId() = 3, mChar = e
	n = Node: getId() = 2, mChar = c
	n = Node: getId() = 4, mChar = d
Node: getId() = 1, mChar = a
Node: getId() = 2, mChar = c
Node: getId() = 3, mChar = e
Node: getId() = 4, mChar = d
Node: getId() = 5, mChar = f
